services:
  next-app:
    container_name: next-app_dev
    build:
      context: ./next-app
      dockerfile: dev.Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres-db:5432/${POSTGRES_DB:-mydb}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NODE_ENV: development
    env_file:
      - .env
    develop:
      watch:
        - action: sync # Sync source code (excluding ignored paths)
          path: ./next-app/src # Source on host
          target: /app/src      # Destination in container
          ignore:         # Paths to ignore from syncing (relative to 'path' above)
            - node_modules/
            - .next/
            - .git/ # Good to add if .git is ever inside next-app
            # Add any other build artifacts or large folders within ./next-app you don't want synced
        - action: rebuild # Rebuild the image if package.json changes
          path: ./next-app/package.json
        # You might also want to watch package-lock.json or yarn.lock for rebuild
        - action: rebuild
          path: ./next-app/package-lock.json
        # - action: rebuild
        #   path: ./next-app/yarn.lock # If using yarn
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - my_stack_network
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy
    # Still use a named volume for node_modules to isolate them from host interference
    # This ensures the container uses node_modules built inside the image.
    # The 'develop:watch' syncs other files around it.
    volumes:
      - app_node_modules:/app/node_modules

  postgres-db:
    container_name: postgres-db_dev
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata_dev:/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - my_stack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-mydb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

networks:
  my_stack_network:
    driver: bridge

volumes:
  pgdata_dev:
  app_node_modules: {} # Ensure this named volume is declared
